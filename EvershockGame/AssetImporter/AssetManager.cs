using Managers;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Windows;

namespace AssetImporter
{
    public class AssetManager : BaseManager<AssetManager>, INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        public string RootPath { get; private set; }
        public string AssetsPath { get; private set; }
        public string ProjectPath { get; private set; }
        public ObservableCollection<Asset> Assets { get; set; }

        private Asset m_Selection;
        public Asset Selection
        {
            get { return m_Selection; }
            set
            {
                m_Selection = value;
                OnPropertyChanged("Selection");
            }
        }

        public Window Main { get; private set; }

        //---------------------------------------------------------------------------

        protected AssetManager()
        {
            RootPath = Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, @"..\..\..\", "EvershockGame/Content"));
            AssetsPath = Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, @"..\..\", "Assets.json"));
            ProjectPath = Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, @"..\..\..\", "EvershockGame/Code/AssetData.cs"));
        }

        //---------------------------------------------------------------------------

        public void Add(string name, string path, EAssetType assetType)
        {
            string absolutePath = Path.Combine(RootPath, path);
            if (File.Exists(absolutePath))
            {
                Assets.Add(new Asset(name, path, assetType));
            }
        }

        //---------------------------------------------------------------------------

        public void Generate()
        {
            if (File.Exists(ProjectPath))
            {
                using (FileStream stream = new FileStream(ProjectPath, FileMode.Create))
                {
                    using (StreamWriter writer = new StreamWriter(stream))
                    {
                        writer.Write("/* This file is autogenerated. Do not edit by hand! */\n\nnamespace EvershockGame.Code\n{\n");
                        foreach (EAssetType type in Enum.GetValues(typeof(EAssetType)))
                        {
                            GenerateEnum(writer, type);
                        }
                        writer.Write("}");
                    }
                }
                MessageBox.Show(Main, "Successfully generated file.", "", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        //---------------------------------------------------------------------------

        private void GenerateEnum(StreamWriter writer, EAssetType type)
        {
            writer.Write("\n    //---------------------------------------------------------------------------\n\n");
            writer.Write(string.Format("    public enum E{0}Assets\n    {{\n", type.ToString()));
            foreach (Asset asset in Assets)
            {
                if (asset.AssetType.HasFlag(type))
                {
                    writer.Write(string.Format("        {0},\n", asset.Name));
                }
            }
            writer.Write("    }\n");
        }

        //---------------------------------------------------------------------------

        public void StoreData()
        {
            using (FileStream stream = new FileStream(AssetsPath, FileMode.Create))
            {
                using (StreamWriter writer = new StreamWriter(stream))
                {
                    writer.Write(JsonConvert.SerializeObject(Assets, Formatting.Indented));
                }
            }
            foreach (Asset asset in Assets)
            {
                asset.Save();
            }
        }

        //---------------------------------------------------------------------------

        public void LoadData()
        {
            if (File.Exists(AssetsPath))
            {
                using (FileStream stream = new FileStream(AssetsPath, FileMode.Open))
                {
                    using (StreamReader reader = new StreamReader(stream))
                    {
                        Assets = JsonConvert.DeserializeObject<ObservableCollection<Asset>>(reader.ReadToEnd());
                    }
                }
            }
            if (Assets == null) Assets = new ObservableCollection<Asset>();
        }

        //---------------------------------------------------------------------------

        public void RegisterMainWindow(Window main)
        {
            Main = main;
        }

        //---------------------------------------------------------------------------

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
