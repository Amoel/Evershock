/* This file is autogenerated. Do not edit by hand! */

using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Managers;

namespace EvershockGame.Code
{
    public enum ESpriteAssets
    {
        WalkingAnimation,
        WalkingAnimation2,
        WalkingAnimation3,
        BlueOrb,
        RedOrb,
        YellowOrb,
        CameraBackground1,
        ChestClosed1,
        ChestOpened1,
        DefaultTexture,
        Arrows1,
        Barrel1,
        Spikes1,
    }

    //---------------------------------------------------------------------------

    public enum ETilesetAssets
    {
        DungeonTileset1,
        Hearts,
    }

    //---------------------------------------------------------------------------

    public enum ELightAssets
    {
        CircleLight,
    }

    //---------------------------------------------------------------------------

    public enum EEffectAssets
    {
        DeferredLighting,
        BloomExtract,
        BloomCombine,
        Blur,
    }

    //---------------------------------------------------------------------------

    public enum EFontAssets
    {
        DebugFont,
    }

    //---------------------------------------------------------------------------

    public class AssetManager : BaseManager<AssetManager>
    {
        public ContentManager Content { get; set; }

        //---------------------------------------------------------------------------

        private Dictionary<ESpriteAssets, string> m_SpriteMapping = new Dictionary<ESpriteAssets, string>()
        {
            { ESpriteAssets.WalkingAnimation, "Graphics/Tilesets/Debug/WalkingAnimation" },
            { ESpriteAssets.WalkingAnimation2, "Graphics/Tilesets/Debug/WalkingAnimation2" },
            { ESpriteAssets.WalkingAnimation3, "Graphics/Tilesets/Debug/WalkingAnimation3" },
            { ESpriteAssets.BlueOrb, "Graphics/Various/BlueOrb" },
            { ESpriteAssets.RedOrb, "Graphics/Various/RedOrb" },
            { ESpriteAssets.YellowOrb, "Graphics/Various/YellowOrb" },
            { ESpriteAssets.CameraBackground1, "Graphics/Camera/BackgroundTexture1" },
            { ESpriteAssets.ChestClosed1, "Graphics/Tiles/ChestClosed1" },
            { ESpriteAssets.ChestOpened1, "Graphics/Tiles/ChestOpened1" },
            { ESpriteAssets.DefaultTexture, "Graphics/Debug/DefaultPlaceholder" },
            { ESpriteAssets.Arrows1, "Graphics/Debug/ArrowSheetP1" },
            { ESpriteAssets.Barrel1, "Graphics/Tiles/Barrel1" },
            { ESpriteAssets.Spikes1, "Graphics/Tilesets/Spikes" },
        };

        private Dictionary<Type, Dictionary<ESpriteAssets, dynamic>> m_SpriteAssets;

        //---------------------------------------------------------------------------

        private Dictionary<ETilesetAssets, string> m_TilesetMapping = new Dictionary<ETilesetAssets, string>()
        {
            { ETilesetAssets.DungeonTileset1, "Graphics/Tilesets/DungeonTileset" },
            { ETilesetAssets.Hearts, "Graphics/Tilesets/Hearts" },
        };

        private Dictionary<Type, Dictionary<ETilesetAssets, dynamic>> m_TilesetAssets;

        //---------------------------------------------------------------------------

        private Dictionary<ELightAssets, string> m_LightMapping = new Dictionary<ELightAssets, string>()
        {
            { ELightAssets.CircleLight, "Graphics/Lights/CircleLight" },
        };

        private Dictionary<Type, Dictionary<ELightAssets, dynamic>> m_LightAssets;

        //---------------------------------------------------------------------------

        private Dictionary<EEffectAssets, string> m_EffectMapping = new Dictionary<EEffectAssets, string>()
        {
            { EEffectAssets.DeferredLighting, "Effects/DeferredLighting" },
            { EEffectAssets.BloomExtract, "Effects/BloomExtract" },
            { EEffectAssets.BloomCombine, "Effects/BloomCombine" },
            { EEffectAssets.Blur, "Effects/Blur" },
        };

        private Dictionary<Type, Dictionary<EEffectAssets, dynamic>> m_EffectAssets;

        //---------------------------------------------------------------------------

        private Dictionary<EFontAssets, string> m_FontMapping = new Dictionary<EFontAssets, string>()
        {
            { EFontAssets.DebugFont, "Fonts/DebugFont" },
        };

        private Dictionary<Type, Dictionary<EFontAssets, dynamic>> m_FontAssets;

        //---------------------------------------------------------------------------

        protected AssetManager()
        {
            m_SpriteAssets = new Dictionary<Type, Dictionary<ESpriteAssets, dynamic>>();
            m_TilesetAssets = new Dictionary<Type, Dictionary<ETilesetAssets, dynamic>>();
            m_LightAssets = new Dictionary<Type, Dictionary<ELightAssets, dynamic>>();
            m_EffectAssets = new Dictionary<Type, Dictionary<EEffectAssets, dynamic>>();
            m_FontAssets = new Dictionary<Type, Dictionary<EFontAssets, dynamic>>();
        }

        //---------------------------------------------------------------------------

        public T Find<T>(ESpriteAssets asset)
        {
            if (m_SpriteAssets.ContainsKey(typeof(T)))
            {
                if (m_SpriteAssets[typeof(T)].ContainsKey(asset))
                    return (T)m_SpriteAssets[typeof(T)][asset];
            }
            return default(T);
        }

        //---------------------------------------------------------------------------

        public T Find<T>(ETilesetAssets asset)
        {
            if (m_TilesetAssets.ContainsKey(typeof(T)))
            {
                if (m_TilesetAssets[typeof(T)].ContainsKey(asset))
                    return (T)m_TilesetAssets[typeof(T)][asset];
            }
            return default(T);
        }

        //---------------------------------------------------------------------------

        public T Find<T>(ELightAssets asset)
        {
            if (m_LightAssets.ContainsKey(typeof(T)))
            {
                if (m_LightAssets[typeof(T)].ContainsKey(asset))
                    return (T)m_LightAssets[typeof(T)][asset];
            }
            return default(T);
        }

        //---------------------------------------------------------------------------

        public T Find<T>(EEffectAssets asset)
        {
            if (m_EffectAssets.ContainsKey(typeof(T)))
            {
                if (m_EffectAssets[typeof(T)].ContainsKey(asset))
                    return (T)m_EffectAssets[typeof(T)][asset];
            }
            return default(T);
        }

        //---------------------------------------------------------------------------

        public T Find<T>(EFontAssets asset)
        {
            if (m_FontAssets.ContainsKey(typeof(T)))
            {
                if (m_FontAssets[typeof(T)].ContainsKey(asset))
                    return (T)m_FontAssets[typeof(T)][asset];
            }
            return default(T);
        }

        //---------------------------------------------------------------------------

        public void LoadAll()
        {
            foreach (KeyValuePair<ESpriteAssets, string> kvp in m_SpriteMapping)
            {
                Store<Texture2D>(kvp.Key, kvp.Value);
            }
            foreach (KeyValuePair<ETilesetAssets, string> kvp in m_TilesetMapping)
            {
                Store<Texture2D>(kvp.Key, kvp.Value);
            }
            foreach (KeyValuePair<ELightAssets, string> kvp in m_LightMapping)
            {
                Store<Texture2D>(kvp.Key, kvp.Value);
            }
            foreach (KeyValuePair<EEffectAssets, string> kvp in m_EffectMapping)
            {
                Store<Effect>(kvp.Key, kvp.Value);
            }
            foreach (KeyValuePair<EFontAssets, string> kvp in m_FontMapping)
            {
                Store<SpriteFont>(kvp.Key, kvp.Value);
            }
        }

        //---------------------------------------------------------------------------

        public void Store<T>(ESpriteAssets type, string path)
        {
            T asset = Content.Load<T>(path);
            if (!m_SpriteAssets.ContainsKey(typeof(T)))
            {
                m_SpriteAssets.Add(typeof(T), new Dictionary<ESpriteAssets, dynamic>());
            }
            if (!m_SpriteAssets[typeof(T)].ContainsKey(type))
            {
                m_SpriteAssets[typeof(T)].Add(type, asset);
            }
        }

        //---------------------------------------------------------------------------

        public void Store<T>(ETilesetAssets type, string path)
        {
            T asset = Content.Load<T>(path);
            if (!m_TilesetAssets.ContainsKey(typeof(T)))
            {
                m_TilesetAssets.Add(typeof(T), new Dictionary<ETilesetAssets, dynamic>());
            }
            if (!m_TilesetAssets[typeof(T)].ContainsKey(type))
            {
                m_TilesetAssets[typeof(T)].Add(type, asset);
            }
        }

        //---------------------------------------------------------------------------

        public void Store<T>(ELightAssets type, string path)
        {
            T asset = Content.Load<T>(path);
            if (!m_LightAssets.ContainsKey(typeof(T)))
            {
                m_LightAssets.Add(typeof(T), new Dictionary<ELightAssets, dynamic>());
            }
            if (!m_LightAssets[typeof(T)].ContainsKey(type))
            {
                m_LightAssets[typeof(T)].Add(type, asset);
            }
        }

        //---------------------------------------------------------------------------

        public void Store<T>(EEffectAssets type, string path)
        {
            T asset = Content.Load<T>(path);
            if (!m_EffectAssets.ContainsKey(typeof(T)))
            {
                m_EffectAssets.Add(typeof(T), new Dictionary<EEffectAssets, dynamic>());
            }
            if (!m_EffectAssets[typeof(T)].ContainsKey(type))
            {
                m_EffectAssets[typeof(T)].Add(type, asset);
            }
        }

        //---------------------------------------------------------------------------

        public void Store<T>(EFontAssets type, string path)
        {
            T asset = Content.Load<T>(path);
            if (!m_FontAssets.ContainsKey(typeof(T)))
            {
                m_FontAssets.Add(typeof(T), new Dictionary<EFontAssets, dynamic>());
            }
            if (!m_FontAssets[typeof(T)].ContainsKey(type))
            {
                m_FontAssets[typeof(T)].Add(type, asset);
            }
        }
    }
}